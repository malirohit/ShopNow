// Here we will add the logic using it we will allow user to create the account or login on website

import userModel from "../models/userModel.js";
import bcrypt from "bcrypt"
import validator from "validator";
import jwt from 'jsonwebtoken'

// When we have created the token , we have added one object & in that object we have the user's id
const createToken = (id) =>{
    return jwt.sign({id},process.env.JWT_SECRET) 
    // JWT_SECRET key that will create manually
    // JWT_SECRET should string using which JWT will sign the data and
    // create the tooken 
}

// Route for user login
const loginUser = async (req, res) => {

   try {
    
     const {email,password} = req.body;

     // Find that user in db
     const user = await userModel.findOne({email});

     // If user doesn't exists
     if(!user){
        return res.json({success:false,message:"User doesn't exists"})
     }

     // if user exists , now check for its password
     const isMatch = await bcrypt.compare(password,user.password) 
     // match the user password with password of that user in database

     if(isMatch){ // Generate the token and send that token to user
       const token = createToken(user._id)
       res.json({success:true,token})
        
     }
     else{ // if password is not matching
        res.json({success:false,message:"Invalid Credentials"})
     }

   } catch (error) {
     console.log(error);
     res.json({success:false,message:error.message})
   }

};

// Route for user register
const registerUser = async (req, res) => {

  try {

    // res.json({msg:" Register API WORKING"}) 
    // {} is object

    const { name, email, password } = req.body;

    //cheking user already exists or not
    const exists = await userModel.findOne({ email });

    if (exists) {
      return res.json({ success: false, message: "User already exists" });
    }

    // Validating Email Format and strong password
    // email will get from request body = req.body
    if( !validator.isEmail(email) ) { // If our email is not valid
        return res.json({success:false,message:"Please enter a valid email"})
    }

    if( password.length < 8  ) {
        return res.json({success:false,message:"Please enter a strong password"})
    }

    // now if email is valid and password is strong we will create an
    // account for user

    //hashing user password
    const salt = await bcrypt.genSalt(10)// Create a salt // If we took bigger number it will consume time to generate or encrypt the password
    const hashedPassword = await bcrypt.hash(password,salt)

    // create new user 
    const newUser = new userModel({
        name,
        email,
        password:hashedPassword
    })

    const user = await newUser.save() //Save user in database

    const token = createToken(user._id) // create a token so that user will login in application
    // whenever new user is created _id property will be generated by default
    // _id is auto generated in mongodb database

    res.json({success:true,token})


  } catch (error) {
    console.log(error)
    res.json({success:false,message:error.message})
  }
};

// Route for admin login
const adminLogin = async (req, res) => {
   try {
     
      const {email,password} = req.body

      if(email === process.env.ADMIN_EMAIL && password === process.env.ADMIN_PASSWORD )
      {
        // If credential are correct then we will create a token and send it to the admin user
        // Using this token we can authenticate the admin
        const token = jwt.sign(email+password,process.env.JWT_SECRET) // email+password+process.env.JWT_SECRET will be a string
        res.json({success:true,token})
      }
      else
      {
        res.json({success:false,message:"Invalid Credentials"})
      }
     
   } catch (error) {
    
      console.log(error);
      res.json({success:false,message:error.message})
      
   }
};

export { loginUser, registerUser, adminLogin };


// {
//   "name" : "Bean Tead",
//   "email" : "beantead@gmail.com",
//   "password" : "123456789"
// }